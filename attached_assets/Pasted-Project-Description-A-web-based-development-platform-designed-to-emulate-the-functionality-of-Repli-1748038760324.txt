Project Description:
A web-based development platform designed to emulate the functionality of Replit, integrating AI assistance to provide developers with an intuitive and interactive coding environment. The platform features ChatGPT for prompt refinement and improvement, alongside Claude for offering architectural insights and development guidance. It combines a sleek and modern integrated development environment (IDE) with robust AI-powered tools for debugging, context management, and error handling.

Core Features:

Interactive Chat Interface:

AI-powered prompt refinement via ChatGPT.

Development architecture suggestions and insights through Claude.

Context-aware guidance tailored to the current file or project.

Integrated IDE:

File management system supporting folders and multiple files.

Syntax highlighting and autocomplete functionality.

Embedded console for live output and error logs.

Error Interpretation & Debugging:

AI-powered error explanations in simple terms.

Suggestions for potential fixes and improvements.

Smart Context Management System:

Efficient API usage by dynamically managing data sent to Claude.

Seamless switching between files without losing context.

Functional Base Model Details:

The platform should be fully functional in its initial state, providing all core features without requiring API integrations.

Placeholder configurations for ChatGPT and Claude API keys should be included, allowing users to integrate their keys later if desired.

Default responses should simulate AI assistance, enabling users to test functionality without active APIs.

Technical Specifications and Design Style Guide:

Design Aesthetics:

Colors:

Primary: #0066CC (Royal Blue)

Secondary: #003366 (Dark Blue)

Background: #F5F9FF (Light Blue)

Text: #1A1A1A (Near Black)

Accent: #4DA3FF (Bright Blue)

Fonts:

SF Pro Display for headings and UI elements.

JetBrains Mono for code and text in the IDE.

Layout:

Split-pane layout with collapsible panels for file tree and chat.

Modern flat design with 16px spacing and subtle shadows.

Support for dark mode with complementary color palette.

Functional Modules:

File Tree Panel: Add, edit, and organize project files.

Chat Panel: Real-time interaction with AI assistants.

Main Editor: Syntax-highlighted code editor with autocomplete and linting.

Console Panel: Display live code output and debug logs.

Core Technologies:

Frontend: React with TailwindCSS for styling.

Backend: Node.js/Express for managing API routes and requests.

WebSocket for real-time communication between chat and IDE.

README Requirements:
The README file should be thorough and descriptive, providing all necessary details to help users understand, use, and expand upon the project. It must include:

Project Overview:

Purpose of the project.

Key features and functionalities.

Getting Started:

Prerequisites: Software and tools needed to run the project.

Installation guide with clear step-by-step instructions.

Running the development server and accessing the platform.

Customization:

Instructions for integrating ChatGPT and Claude APIs.

Configuration of environment variables for API keys.

Usage Guide:

Explanation of the IDE interface.

How to interact with the AI chat panel.

Basic file management and console operations.

Technical Architecture:

Overview of the codebase structure.

Key components and their responsibilities.

Backend and frontend interactions.

Future Enhancements:

Suggested features and improvements for the next versions.

Contribution Guidelines:

How others can contribute to the project.

Code style and conventions.

License:

Information about the license governing the project's use.

Additional Notes:

Ensure the platform is built to be modular and scalable, allowing for easy integration of additional features in the future.

Include demo content and mock data to simulate real usage scenarios for testing.

Prioritize clean, maintainable code with comments explaining critical sections.